<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Public Gallery - DataVault</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #000000;
            color: #ffffff;
        }
        .bg-gray-900 { background-color: #1a1a1a; }
        .bg-gray-800 { background-color: #2a2a2a; }
        .border-gray-700 { border-color: #333333; }
        .border-gray-800 { border-color: #444444; }
        
        .masonry-grid {
            column-count: 1;
            column-gap: 1.5rem;
        }
        @media (min-width: 640px) { .masonry-grid { column-count: 2; } }
        @media (min-width: 1024px) { .masonry-grid { column-count: 3; } }
        
        .masonry-item {
            break-inside: avoid;
            margin-bottom: 1.5rem;
        }
    </style>
</head>
<body class="min-h-screen">

    <!-- Navigation -->
    <nav class="bg-gray-900 border-b border-gray-800 sticky top-0 z-30">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center space-x-4">
                    <a href="/" class="flex items-center space-x-2">
                        <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path></svg>
                        </div>
                        <span class="text-xl font-bold text-white">DataVault</span>
                    </a>
                </div>
                <div class="hidden md:flex items-center space-x-2">
                    <a href="/home" class="text-gray-300 hover:bg-gray-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Upload</a>
                    <a href="/files" class="text-gray-300 hover:bg-gray-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">My Files</a>
                    <a href="/public-files" class="bg-gray-800 text-white px-3 py-2 rounded-md text-sm font-medium">Public Gallery</a>
                    <% if (user) { %>
                        <button onclick="logout()" class="text-gray-300 hover:bg-red-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Logout</button>
                    <% } else { %>
                        <a href="/user/login" class="text-gray-300 hover:bg-gray-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Login</a>
                        <a href="/user/register" class="ml-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">Sign Up</a>
                    <% } %>
                </div>
                <div class="md:hidden">
                    <button id="mobile-menu-button" class="text-gray-400 hover:text-white p-2">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m4-6h16"></path></svg>
                    </button>
                </div>
            </div>
        </div>
        <div id="mobile-menu" class="md:hidden hidden bg-gray-900 border-t border-gray-800">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                <a href="/home" class="text-gray-300 hover:bg-gray-800 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Upload</a>
                <a href="/files" class="text-gray-300 hover:bg-gray-800 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">My Files</a>
                <a href="/public-files" class="bg-gray-800 text-white block px-3 py-2 rounded-md text-base font-medium">Public Gallery</a>
                 <% if (user) { %>
                    <button onclick="logout()" class="text-gray-300 hover:bg-red-800 hover:text-white block w-full text-left px-3 py-2 rounded-md text-base font-medium transition-colors">Logout</button>
                <% } else { %>
                    <a href="/user/login" class="text-gray-300 hover:bg-gray-800 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Login</a>
                    <a href="/user/register" class="text-gray-300 hover:bg-gray-800 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Sign Up</a>
                <% } %>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
            <h1 class="text-5xl font-bold text-white">Public Gallery</h1>
            <p class="mt-4 text-lg text-gray-400 max-w-3xl mx-auto">Discover files shared by our community. Explore, download, and get inspired.</p>
        </div>

        <!-- Gallery Section -->
        <div class="bg-gray-900 rounded-lg border border-gray-800 shadow-lg">
            <div class="px-6 py-4 border-b border-gray-800">
                <h2 class="text-xl font-semibold text-white">Community Showcase</h2>
                <p class="text-gray-400 text-sm mt-1"><span id="file-count" class="font-bold">0</span> public files available</p>
            </div>

            <!-- Loading State -->
            <div id="loading" class="flex items-center justify-center py-24">
                <div class="w-12 h-12 border-4 border-gray-700 border-t-blue-500 rounded-full animate-spin"></div>
                <p class="ml-4 text-gray-400">Loading public files...</p>
            </div>

            <!-- Empty State -->
            <div id="no-files" class="hidden text-center py-24">
                <svg class="mx-auto h-12 w-12 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9V3m0 18a9 9 0 009-9m-9 9a9 9 0 00-9-9" /></svg>
                <h3 class="mt-2 text-lg font-medium text-white">The gallery is empty</h3>
                <p class="mt-1 text-sm text-gray-400">Be the first to share a file with the community!</p>
                <div class="mt-6">
                    <a href="/user/register" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">
                        Join Now & Share
                    </a>
                </div>
            </div>

            <!-- Files Gallery -->
            <div id="files-gallery" class="hidden p-6">
                <div id="files-container" class="masonry-grid">
                    <!-- File cards will be populated here -->
                </div>
            </div>
        </div>
    </main>

    <!-- Notification Container -->
    <div id="notifications" class="fixed top-5 right-5 z-50 space-y-3"></div>

    <script>
        // --- UTILITY FUNCTIONS ---
        const formatFileSize = bytes => {
            try {
                if (!bytes && bytes !== 0) return '0 Bytes';
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
            } catch (err) {
                console.error('Error formatting file size:', err, bytes);
                return '0 Bytes';
            }
        };

        const formatDate = dateString => {
            try {
                if (!dateString) return 'Unknown date';
                return new Date(dateString).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
            } catch (err) {
                console.error('Error formatting date:', err, dateString);
                return 'Unknown date';
            }
        };

        const getFileIcon = (mimetype) => {
            const iconColor = "text-blue-400";
            if (mimetype.startsWith('image/')) return `<svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>`;
            if (mimetype.includes('pdf')) return `<svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>`;
            if (mimetype.includes('video/')) return `<svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>`;
            if (mimetype.includes('audio/')) return `<svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path></svg>`;
            if (mimetype.includes('zip') || mimetype.includes('rar')) return `<svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10l8 4 8-4V7M4 7L12 3l8 4M4 7l8 4m0 0l8-4m-8 4v10"></path></svg>`;
            return `<svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg>`;
        };

        const showNotification = (message, isError = false) => {
            const container = document.getElementById('notifications');
            const notification = document.createElement('div');
            notification.className = `px-4 py-3 rounded-md shadow-lg text-sm font-medium ${isError ? 'bg-red-600 text-white' : 'bg-blue-600 text-white'}`;
            notification.textContent = message;
            container.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        };

        // --- API & RENDERING ---
        const renderFiles = (files) => {
            try {
                const container = document.getElementById('files-container');
                container.innerHTML = ''; // Clear container
                
                console.log('Rendering files:', files); // Debug: Log files being rendered
                
                files.forEach(file => {
                    try {
                        console.log('Processing file:', file.originalName); // Debug: Log each file
                        
                        // Check if uploadedBy exists and has name property
                        const uploaderName = file.uploadedBy && file.uploadedBy.name ? file.uploadedBy.name : 'Unknown';
                        
                        const card = document.createElement('div');
                        card.className = 'masonry-item bg-gray-800 rounded-lg p-5 border border-gray-700 hover:border-blue-500 transition-all duration-300';
                        card.innerHTML = `
                            <div class="flex items-start justify-between mb-4">
                                <div class="p-3 bg-gray-900 rounded-lg">${getFileIcon(file.mimetype || 'application/octet-stream')}</div>
                                <div class="text-right">
                                    <div class="text-sm text-gray-300">by ${uploaderName}</div>
                                    <div class="text-xs text-gray-500">${formatDate(file.uploadDate)}</div>
                                </div>
                            </div>
                            <h3 class="text-lg font-bold text-white truncate mb-2" title="${file.originalName}">${file.originalName}</h3>
                            <p class="text-sm text-gray-400 mb-4 h-10 overflow-hidden">${file.description || 'No description available.'}</p>
                            <div class="flex justify-between items-center text-xs text-gray-500 mb-4">
                                <span>${formatFileSize(file.size || 0)}</span>
                                <span>${file.downloadCount || 0} downloads</span>
                            </div>
                            <div class="flex gap-2">
                                <a href="/download/${file._id}" class="flex-1 text-center bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-semibold transition-colors">Download</a>
                                <button onclick="copyShareLink('${file._id}', '${(file.originalName || '').replace(/'/g, "\\'")}')" class="bg-gray-700 hover:bg-gray-600 text-gray-300 px-3 py-2 rounded-md text-sm transition-colors">Copy Link</button>
                            </div>
                        `;
                        container.appendChild(card);
                    } catch (fileError) {
                        console.error('Error rendering individual file:', fileError, file);
                    }
                });
                
                // Check if anything was added to the container
                console.log('Files added to container:', container.children.length);
                if (container.children.length === 0) {
                    console.log('No files were rendered despite having data');
                }
            } catch (renderError) {
                console.error('Error in renderFiles function:', renderError);
            }
        };

        const loadPublicFiles = async () => {
            try {
                const response = await fetch('/public-files-api');
                if (!response.ok) throw new Error('Failed to fetch files');
                const result = await response.json();
                
                console.log('API Response:', result); // Debug: Log the entire response
                
                document.getElementById('loading').classList.add('hidden');
                if (result.success && result.files && result.files.length > 0) {
                    document.getElementById('file-count').textContent = result.files.length;
                    document.getElementById('files-gallery').classList.remove('hidden');
                    document.getElementById('no-files').classList.add('hidden'); // Ensure no-files is hidden
                    console.log('Files to render:', result.files.length); // Debug: Log file count
                    renderFiles(result.files);
                } else {
                    document.getElementById('files-gallery').classList.add('hidden'); // Ensure gallery is hidden
                    document.getElementById('no-files').classList.remove('hidden');
                    console.log('No files to display'); // Debug: Log empty state
                }
            } catch (error) {
                console.error('Error loading public files:', error);
                document.getElementById('loading').innerHTML = '<p class="text-red-500 text-center py-24">Failed to load public files. Please try again later.</p>';
            }
        };

        const copyShareLink = (fileId, fileName) => {
            const link = `${window.location.origin}/download/${fileId}`;
            navigator.clipboard.writeText(link).then(() => {
                showNotification(`Link for "${fileName}" copied!`);
            }).catch(() => {
                showNotification('Failed to copy link.', true);
            });
        };
        
        window.logout = async () => {
            try {
                await fetch('/user/logout', { method: 'POST' });
            } finally {
                window.location.href = '/';
            }
        };

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            loadPublicFiles();

            const menuButton = document.getElementById('mobile-menu-button');
            const mobileMenu = document.getElementById('mobile-menu');
            menuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
        });
    </script>
</body>
</html>