<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Files - DataVault</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #000000;
            color: #ffffff;
        }
        .bg-gray-900 { background-color: #1a1a1a; }
        .bg-gray-800 { background-color: #2a2a2a; }
        .border-gray-700 { border-color: #333333; }
        .border-gray-800 { border-color: #444444; }
        .table-fixed-layout { table-layout: fixed; }
    </style>
</head>
<body class="min-h-screen">

    <!-- Navigation -->
    <nav class="bg-gray-900 border-b border-gray-800 sticky top-0 z-30">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center space-x-4">
                    <a href="/home" class="flex items-center space-x-2">
                        <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path></svg>
                        </div>
                        <span class="text-xl font-bold text-white">DataVault</span>
                    </a>
                </div>
                <div class="hidden md:flex items-center space-x-2">
                    <a href="/home" class="text-gray-300 hover:bg-gray-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Upload</a>
                    <a href="/files" class="bg-gray-800 text-white px-3 py-2 rounded-md text-sm font-medium">My Files</a>
                    <a href="/public-files" class="text-gray-300 hover:bg-gray-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Public Gallery</a>
                    <button onclick="logout()" class="text-gray-300 hover:bg-red-800 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Logout</button>
                </div>
                <div class="md:hidden">
                    <button id="mobile-menu-button" class="text-gray-400 hover:text-white p-2">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m4-6h16"></path></svg>
                    </button>
                </div>
            </div>
        </div>
        <div id="mobile-menu" class="md:hidden hidden bg-gray-900 border-t border-gray-800">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                <a href="/home" class="text-gray-300 hover:bg-gray-800 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Upload</a>
                <a href="/files" class="bg-gray-800 text-white block px-3 py-2 rounded-md text-base font-medium">My Files</a>
                <a href="/public-files" class="text-gray-300 hover:bg-gray-800 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Public Gallery</a>
                <button onclick="logout()" class="text-gray-300 hover:bg-red-800 hover:text-white block w-full text-left px-3 py-2 rounded-md text-base font-medium transition-colors">Logout</button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-4xl font-bold text-white">Your Files</h1>
            <a href="/home" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                Upload New File
            </a>
        </div>

        <!-- Files Section -->
        <div class="bg-gray-900 rounded-lg border border-gray-800 shadow-lg overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-800 flex justify-between items-center">
                <div>
                    <h2 class="text-xl font-semibold text-white">File Management</h2>
                    <p class="text-gray-400 text-sm mt-1">You have <span id="file-count" class="font-bold">0</span> files.</p>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading" class="flex items-center justify-center py-16">
                <div class="w-12 h-12 border-4 border-gray-700 border-t-blue-500 rounded-full animate-spin"></div>
                <p class="ml-4 text-gray-400">Loading your files...</p>
            </div>

            <!-- Empty State -->
            <div id="no-files" class="hidden text-center py-16">
                <svg class="mx-auto h-12 w-12 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" /></svg>
                <h3 class="mt-2 text-lg font-medium text-white">No files yet</h3>
                <p class="mt-1 text-sm text-gray-400">Get started by uploading a new file.</p>
                <div class="mt-6">
                    <a href="/home" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
                        Upload File
                    </a>
                </div>
            </div>

            <!-- Files Table -->
            <div id="files-table-container" class="hidden overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-800 table-fixed-layout">
                    <thead class="bg-gray-800">
                        <tr>
                            <th scope="col" class="w-2/5 px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">File Name</th>
                            <th scope="col" class="w-1/5 px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Size</th>
                            <th scope="col" class="w-1/5 px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                            <th scope="col" class="w-1/5 px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="files-tbody" class="bg-gray-900 divide-y divide-gray-800">
                        <!-- Rows will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <!-- File Action Modal -->
    <div id="file-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 hidden">
        <div class="bg-gray-900 border border-gray-700 rounded-lg shadow-xl w-full max-w-lg">
            <div class="p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-white" id="modal-file-name">File Details</h3>
                    <button onclick="closeModal()" class="text-gray-400 hover:text-white p-1 rounded-full hover:bg-gray-700 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>
                <div id="modal-content" class="space-y-4 text-sm">
                    <!-- Dynamic content will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Container -->
    <div id="notifications" class="fixed top-5 right-5 z-50 space-y-3"></div>

    <script>
        // --- UTILITY FUNCTIONS ---
        const formatFileSize = bytes => {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
        };

        const formatDate = dateString => new Date(dateString).toLocaleString();

        const getFileIcon = mimetype => {
            if (mimetype.startsWith('image/')) return 'üñºÔ∏è';
            if (mimetype.includes('pdf')) return 'üìÑ';
            if (mimetype.includes('word') || mimetype.includes('document')) return 'üìù';
            if (mimetype.includes('spreadsheet') || mimetype.includes('excel')) return 'üìä';
            if (mimetype.includes('zip') || mimetype.includes('rar')) return 'üì¶';
            return 'üìÑ';
        };

        const showNotification = (message, isError = false) => {
            const notification = document.createElement('div');
            notification.className = `px-4 py-3 rounded-md shadow-lg text-sm font-medium ${isError ? 'bg-red-600 text-white' : 'bg-blue-600 text-white'}`;
            notification.textContent = message;
            document.getElementById('notifications').appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        };

        // --- API CALLS ---
        const fetchFiles = async () => {
            try {
                const response = await fetch('/files');
                if (!response.ok) throw new Error('Network response was not ok');
                return await response.json();
            } catch (error) {
                console.error('Error fetching files:', error);
                showNotification('Error loading files. Please try again.', true);
                return null;
            }
        };

        const togglePrivacyAPI = async (fileId) => {
            try {
                const response = await fetch(`/toggle-privacy/${fileId}`, { method: 'POST' });
                return await response.json();
            } catch (error) {
                console.error('Error toggling privacy:', error);
                return { success: false, message: 'An error occurred.' };
            }
        };

        const deleteFileAPI = async (fileId) => {
            try {
                const response = await fetch(`/delete/${fileId}`, { method: 'DELETE' });
                return await response.json();
            } catch (error) {
                console.error('Error deleting file:', error);
                return { success: false, message: 'An error occurred.' };
            }
        };

        // --- UI RENDERING ---
        const renderFiles = (files) => {
            const tbody = document.getElementById('files-tbody');
            tbody.innerHTML = '';
            files.forEach(file => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-800 transition-colors';
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <span class="text-2xl mr-3">${getFileIcon(file.mimetype)}</span>
                            <div>
                                <div class="text-sm font-medium text-white truncate" style="max-width: 20vw;">${file.originalName}</div>
                                <div class="text-xs text-gray-400">${formatDate(file.uploadDate)}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">${formatFileSize(file.size)}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${file.isPublic ? 'bg-green-200 text-green-800' : 'bg-gray-700 text-gray-300'}">
                            ${file.isPublic ? 'üåê Public' : 'üîí Private'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                        <button onclick="openFileModal('${file._id}')" class="text-blue-400 hover:text-blue-300">Details</button>
                        <a href="/download/${file._id}" class="text-green-400 hover:text-green-300">Download</a>
                    </td>
                `;
                tbody.appendChild(row);
            });
        };

        const updateUI = (files) => {
            document.getElementById('loading').classList.add('hidden');
            if (files && files.length > 0) {
                document.getElementById('file-count').textContent = files.length;
                document.getElementById('files-table-container').classList.remove('hidden');
                document.getElementById('no-files').classList.add('hidden');
                renderFiles(files);
            } else {
                document.getElementById('file-count').textContent = 0;
                document.getElementById('files-table-container').classList.add('hidden');
                document.getElementById('no-files').classList.remove('hidden');
            }
        };

        // --- MODAL & ACTIONS ---
        let filesCache = [];

        const openFileModal = (fileId) => {
            const file = filesCache.find(f => f._id === fileId);
            if (!file) return;

            document.getElementById('modal-file-name').textContent = file.originalName;
            const modalContent = document.getElementById('modal-content');
            const shareLink = `${window.location.origin}/download/${file._id}`;

            modalContent.innerHTML = `
                <p><strong class="text-gray-300">File Type:</strong> <span class="text-gray-400">${file.mimetype}</span></p>
                <p><strong class="text-gray-300">Description:</strong> <span class="text-gray-400">${file.description || 'Not provided'}</span></p>
                <p><strong class="text-gray-300">Downloads:</strong> <span class="text-gray-400">${file.downloadCount}</span></p>
                <div>
                    <strong class="text-gray-300">Share Link:</strong>
                    <div class="mt-1 flex rounded-md shadow-sm">
                        <input type="text" value="${shareLink}" readonly class="flex-1 block w-full rounded-none rounded-l-md sm:text-sm bg-gray-800 border-gray-600 text-gray-300 px-3 py-2">
                        <button onclick="copyShareLink('${shareLink}', ${file.isPublic})" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-600 bg-gray-700 text-sm font-medium text-gray-300 hover:bg-gray-600">Copy</button>
                    </div>
                    ${!file.isPublic ? `<p class="text-xs text-yellow-400 mt-1">Note: This file is private. Only you can use this link.</p>` : ''}
                </div>
                <div class="pt-4 flex justify-between items-center">
                    <button onclick="handleTogglePrivacy('${file._id}')" class="px-4 py-2 text-sm font-medium rounded-md ${file.isPublic ? 'bg-yellow-600 hover:bg-yellow-700' : 'bg-green-600 hover:bg-green-700'} text-white">
                        ${file.isPublic ? 'Make Private' : 'Make Public'}
                    </button>
                    <button onclick="handleDeleteFile('${file._id}')" class="px-4 py-2 text-sm font-medium rounded-md bg-red-700 hover:bg-red-800 text-white">Delete File</button>
                </div>
            `;
            document.getElementById('file-modal').classList.remove('hidden');
        };

        const closeModal = () => document.getElementById('file-modal').classList.add('hidden');

        const copyShareLink = (link, isPublic) => {
            navigator.clipboard.writeText(link).then(() => {
                let message = 'Share link copied to clipboard!';
                if (!isPublic) message += ' Remember, the file is private.';
                showNotification(message);
            });
        };

        const handleTogglePrivacy = async (fileId) => {
            const result = await togglePrivacyAPI(fileId);
            showNotification(result.message, !result.success);
            if (result.success) {
                await loadAndRenderFiles();
                closeModal();
            }
        };

        const handleDeleteFile = async (fileId) => {
            if (!confirm('Are you sure you want to permanently delete this file? This action cannot be undone.')) return;
            const result = await deleteFileAPI(fileId);
            showNotification(result.message, !result.success);
            if (result.success) {
                await loadAndRenderFiles();
                closeModal();
            }
        };

        // --- INITIALIZATION & LOGOUT ---
        const loadAndRenderFiles = async () => {
            const result = await fetchFiles();
            if (result && result.success) {
                filesCache = result.files;
                updateUI(filesCache);
            } else {
                updateUI([]);
            }
        };

        window.logout = async () => {
            try {
                await fetch('/user/logout', { method: 'POST' });
            } finally {
                window.location.href = '/';
            }
        };

        document.addEventListener('DOMContentLoaded', () => {
            loadAndRenderFiles();

            const menuButton = document.getElementById('mobile-menu-button');
            const mobileMenu = document.getElementById('mobile-menu');
            menuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
        });
    </script>
</body>
</html>